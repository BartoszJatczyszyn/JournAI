from __future__ import annotations
from typing import Protocol, Optional, Sequence


class IStrengthRepository(Protocol):
    # Schema management
    def ensure_tables(self) -> None: ...

    # Muscle groups
    def list_muscle_groups(self) -> list[dict]: ...
    def upsert_muscle_groups(self, groups: Sequence[dict]) -> None: ...

    # Exercises
    def search_exercises(self, *, query: str | None, muscle_group_id: int | None) -> list[dict]: ...
    def list_exercises(self) -> list[dict]: ...
    def get_exercise(self, exercise_id: int) -> Optional[dict]: ...
    def upsert_exercises(self, exercises: Sequence[dict]) -> None: ...

    # Workouts (nested save/load)
    def create_workout(self, payload: dict) -> dict:
        """Insert exercise_logs + exercise_sets in one transaction linked to a Garmin activity.
        Payload shape:
        {
          activityId, startedAt(optional iso), name, notes, durationMinutes,
          exercises: [ { exerciseDefinitionId, order, notes, sets: [ {setNumber,reps,weight,rpe,isWarmup} ] } ]
        }
        Returns inserted structure with generated ids.
        """
        ...

    def get_workout(self, workout_id: int) -> Optional[dict]: ...
    def list_workouts(self, *, limit: int = 50, offset: int = 0) -> list[dict]: ...
    def update_workout(self, workout_id: int, payload: dict) -> dict: ...
    def delete_workout(self, workout_id: int) -> bool: ...

    # History helpers
    def last_exercise_log(self, exercise_definition_id: int) -> Optional[dict]: ...

    # Analytics (optional extended interface)
    def exercise_e1rm_progress(self, exercise_definition_id: int) -> list[dict]: ...
    def workouts_volume_series(self, days: int = 90) -> list[dict]: ...
    def all_exercises_e1rm_progress(self, days: int = 180) -> list[dict]: ...

__all__ = ["IStrengthRepository"]
